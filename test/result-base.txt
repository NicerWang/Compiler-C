====== GRAMMER TREE ======
->ROOT(54)
-->EntryPoint(54)
--->Statement>COMPOUND(54)
---->Statement>DECLARE(4)
----->Type: Int(4)
----->ID:m(4)
---->Statement>DECLARE(5)
----->Type: Int(5)
----->Statement>ASSIGN(5)
------>ID:kdwada(5)
------>Number:1(5)
---->Statement>DECLARE(7)
----->Type: Int(7)
----->ID:n(7)
---->Statement>ASSIGN(8)
----->ID:m(8)
----->Number:2(8)
---->Statement>CALL(11)
----->ID:scanf(11)
----->Arguments: (11)
------>String:"%d"(11)
------>Expression(11)
------->Operator> & (11)
------->ID:m(11)
---->Statement>ASSIGN(12)
----->ID:n(12)
----->ID:m(12)
---->Statement>CALL(13)
----->ID:printf(13)
----->Arguments: (13)
------>String:"%d\n"(13)
------>Expression(13)
------->Expression(13)
-------->ID:n(13)
-------->Operator> + (13)
-------->Number:100(13)
------->Operator> % (13)
------->Number:2(13)
---->Expression(14)
----->ID:m(14)
----->Operator> ++ (14)
---->Statement>DECLARE(15)
----->Type: Int(15)
----->Statement>ASSIGN(15)
------>ID:i(15)
------>Number:0(15)
---->Statement>DECLARE(16)
----->Type: Int(16)
----->Statement>ASSIGN(16)
------>ID:factorial(16)
------>Number:3(16)
---->Statement>DECLARE(17)
----->Type: Int(17)
----->Statement>ASSIGN(17)
------>ID:result(17)
------>Number:1(17)
---->Statement>WHILE(22)
----->Expression(18)
------>ID:factorial(18)
------>Operator> > (18)
------>Number:0(18)
----->Statement>COMPOUND(22)
------>Statement>ASSIGN(20)
------->ID:result(20)
------->Expression(20)
-------->ID:result(20)
-------->Operator> * (20)
-------->ID:factorial(20)
------>Statement>ASSIGN(21)
------->ID:factorial(21)
------->Expression(21)
-------->ID:factorial(21)
-------->Operator> - (21)
-------->Number:1(21)
---->Statement>CALL(23)
----->ID:printf(23)
----->Arguments: (23)
------>String:"%d\n"(23)
------>Expression(23)
------->Expression(23)
-------->ID:result(23)
-------->Operator> % (23)
-------->Number:100(23)
------->Operator> - (23)
------->Number:1(23)
---->Expression(24)
----->ID:i(24)
----->Operator> ++ (24)
---->Statement>FOR(52)
----->Statement>DECLARE(26)
------>Type: Int(26)
------>Statement>ASSIGN(26)
------->ID:j(26)
------->Number:0(26)
----->Expression(26)
------>Expression(26)
------->ID:result(26)
------->Operator> % (26)
------->Number:100(26)
------>Operator> - (26)
------>Number:1(26)
----->Expression(26)
------>ID:j(26)
------>Operator> ++ (26)
----->Statement>COMPOUND(52)
------>Statement>FOR(51)
------->Statement>DECLARE(28)
-------->Type: Int(28)
-------->Statement>ASSIGN(28)
--------->ID:k(28)
--------->Expression(28)
---------->ID:j(28)
---------->Operator> + (28)
---------->Number:1(28)
------->Expression(28)
-------->ID:k(28)
-------->Operator> < (28)
-------->Expression(28)
--------->Expression(28)
---------->ID:result(28)
---------->Operator> % (28)
---------->Number:100(28)
--------->Operator> - (28)
--------->Number:1(28)
------->Expression(28)
-------->Operator> ++ (28)
-------->ID:k(28)
------->Statement>COMPOUND(51)
-------->Statement>IF(50)
--------->Expression(33)
---------->Expression(33)
----------->Expression(33)
------------>ID:k(33)
------------>Operator> - (33)
------------>Number:5(33)
----------->Operator> == (33)
----------->ID:j(33)
---------->Operator> || (33)
---------->Expression(33)
----------->Expression(33)
------------>Expression(33)
------------->Expression(33)
-------------->Operator> ! (33)
-------------->ID:j(33)
------------->Operator> + (33)
------------->Number:2(33)
------------>Operator> == (33)
------------>ID:k(33)
----------->Operator> && (33)
----------->Expression(33)
------------>Expression(33)
------------->ID:k(33)
------------->Operator> - (33)
------------->Number:3(33)
------------>Operator> == (33)
------------>ID:j(33)
--------->Statement>COMPOUND(38)
---------->Statement>DECLARE(35)
----------->Type: Int(35)
----------->Statement>ASSIGN(35)
------------>ID:i(35)
------------>Number:0(35)
---------->Statement>ASSIGN(36)
----------->ID:i(36)
----------->Expression(36)
------------>ID:k(36)
------------>Operator> % (36)
------------>Expression(36)
------------->ID:j(36)
------------->Operator> + (36)
------------->Number:1(36)
---------->Statement>CALL(37)
----------->ID:printf(37)
----------->Arguments: (37)
------------>String:"1: %d\n"(37)
------------>ID:i(37)
--------->Statement>IF(50)
---------->Expression(39)
----------->Expression(39)
------------>ID:k(39)
------------>Operator> == (39)
------------>Expression(39)
------------->ID:j(39)
------------->Operator> + (39)
------------->Number:3(39)
----------->Operator> && (39)
----------->Expression(39)
------------>Expression(39)
------------->ID:k(39)
------------->Operator> % (39)
------------->Number:2(39)
------------>Operator> == (39)
------------>Number:0(39)
---------->Statement>COMPOUND(43)
----------->Statement>ASSIGN(41)
------------>ID:i(41)
------------>Expression(41)
------------->ID:k(41)
------------->Operator> / (41)
------------->Expression(41)
-------------->ID:j(41)
-------------->Operator> + (41)
-------------->Number:1(41)
----------->Statement>CALL(42)
------------>ID:printf(42)
------------>Arguments: (42)
------------->String:"2: %d\n"(42)
------------->ID:i(42)
---------->Statement>COMPOUND(50)
----------->Statement>CALL(46)
------------>ID:printf(46)
------------>Arguments: (46)
------------->String:"3: %d\n"(46)
------------->ID:i(46)
---->Statement>RET(53)
----->Number:0(53)
====== LEX RESULT ======
INT
MAIN
LBS
RBS
LP
INT
ID m 5811262128
SEMI
INT
ID kdwada 5811262512
OP_ASSIGN
NUMBER 1
SEMI
INT
ID n 5811262784
SEMI
ID m 5811262128
OP_ASSIGN
NUMBER 2
SEMI
ID scanf ~
LBS
COMMA
BIT_AND
ID m 5811262128
RBS
SEMI
ID n 5811262784
OP_ASSIGN
ID m 5811262128
SEMI
ID printf ~
LBS
COMMA
LBS
ID n 5811262784
OP_ADD
NUMBER 100
RBS
OP_MOD
NUMBER 2
RBS
SEMI
ID m 5811262128
OP_PP
SEMI
INT
ID i 5811264304
OP_ASSIGN
NUMBER 0
SEMI
INT
ID factorial 5811264496
OP_ASSIGN
NUMBER 3
SEMI
INT
ID result 5811264688
OP_ASSIGN
NUMBER 1
SEMI
WHILE
LBS
ID factorial 5811264496
GT
NUMBER 0
RBS
LP
ID result 5811264688
OP_ASSIGN
ID result 5811264688
OP_MUL
ID factorial 5811264496
SEMI
ID factorial 5811264496
OP_ASSIGN
ID factorial 5811264496
OP_SUB
NUMBER 1
SEMI
RP
ID printf ~
LBS
COMMA
ID result 5811264688
OP_MOD
NUMBER 100
OP_SUB
NUMBER 1
RBS
SEMI
ID i 5811264304
OP_PP
SEMI
FOR
LBS
INT
ID j 5811266608
OP_ASSIGN
NUMBER 0
SEMI
ID result 5811264688
OP_MOD
NUMBER 100
OP_SUB
NUMBER 1
SEMI
ID j 5811266608
OP_PP
RBS
LP
FOR
LBS
INT
ID k 5811265168
OP_ASSIGN
ID j 5811266608
OP_ADD
NUMBER 1
SEMI
ID k 5811265168
LT
ID result 5811264688
OP_MOD
NUMBER 100
OP_SUB
NUMBER 1
SEMI
OP_PP
ID k 5811265168
RBS
LP
IF
LBS
ID k 5811265168
OP_SUB
NUMBER 5
EQ
ID j 5811266608
OR
NOT
ID j 5811266608
OP_ADD
NUMBER 2
EQ
ID k 5811265168
AND
ID k 5811265168
OP_SUB
NUMBER 3
EQ
ID j 5811266608
RBS
LP
INT
ID i 5811268240
OP_ASSIGN
NUMBER 0
SEMI
ID i 5811268240
OP_ASSIGN
ID k 5811265168
OP_MOD
LBS
ID j 5811266608
OP_ADD
NUMBER 1
RBS
SEMI
ID printf ~
LBS
COMMA
ID i 5811268240
RBS
SEMI
RP
ELSE
IF
LBS
ID k 5811265168
EQ
ID j 5811266608
OP_ADD
NUMBER 3
AND
ID k 5811265168
OP_MOD
NUMBER 2
EQ
NUMBER 0
RBS
LP
ID i 5811264304
OP_ASSIGN
ID k 5811265168
OP_DIV
LBS
ID j 5811266608
OP_ADD
NUMBER 1
RBS
SEMI
ID printf ~
LBS
COMMA
ID i 5811264304
RBS
SEMI
RP
ELSE
LP
ID printf ~
LBS
COMMA
ID i 5811264304
RBS
SEMI
RP
RP
RP
RETURN
NUMBER 0
SEMI
RP
====== SYMBOL TABLE ======
INT i     5811268240
INT k     5811265168
INT j     5811266608
INT result     5811264688
INT factorial     5811264496
INT i     5811264304
INT n     5811262784
INT kdwada     5811262512
INT m     5811262128
====== IntermediateCode ======
1 (=,#5811262512,1,_)
2 (=,#5811262128,2,_)
3 (&,#5811262128,_,temp0)
4 (CALL,scanf,{"%d",temp0,},temp1)
5 (=,#5811262784,#5811262128,_)
6 (+,#5811262784,100,temp2)
7 (%,temp2,2,temp3)
8 (CALL,printf,{"%d\n",temp3,},temp4)
9 (+,#5811262128,0,temp5)
10 (+,#5811262128,1,temp6)
11 (=,#5811262128,temp6,_)
12 (=,#5811264304,0,_)
13 (=,#5811264496,3,_)
14 (=,#5811264688,1,_)
15 (>,#5811264496,0,temp7)
16 (IFNZ,temp7,_,18)
17 (JMP,_,_,23)
18 (*,#5811264688,#5811264496,temp8)
19 (=,#5811264688,temp8,_)
20 (-,#5811264496,1,temp9)
21 (=,#5811264496,temp9,_)
22 (JMP,_,_,15)
23 (%,#5811264688,100,temp10)
24 (-,temp10,1,temp11)
25 (CALL,printf,{"%d\n",temp11,},temp12)
26 (+,#5811264304,0,temp13)
27 (+,#5811264304,1,temp14)
28 (=,#5811264304,temp14,_)
29 (=,#5811266608,0,_)
30 (%,#5811264688,100,temp15)
31 (-,temp15,1,temp16)
32 (IFNZ,temp16,_,34)
33 (JMP,_,_,79)
34 (+,#5811266608,1,temp17)
35 (=,#5811265168,temp17,_)
36 (%,#5811264688,100,temp18)
37 (-,temp18,1,temp19)
38 (<,#5811265168,temp19,temp20)
39 (IFNZ,temp20,_,41)
40 (JMP,_,_,75)
41 (-,#5811265168,5,temp21)
42 (==,temp21,#5811266608,temp22)
43 (!,#5811266608,_,temp23)
44 (+,temp23,2,temp24)
45 (==,temp24,#5811265168,temp25)
46 (-,#5811265168,3,temp26)
47 (==,temp26,#5811266608,temp27)
48 (&&,temp25,temp27,temp28)
49 (||,temp22,temp28,temp29)
50 (IFNZ,temp29,_,52)
51 (JMP,_,_,58)
52 (=,#5811268240,0,_)
53 (+,#5811266608,1,temp30)
54 (%,#5811265168,temp30,temp31)
55 (=,#5811268240,temp31,_)
56 (CALL,printf,{"1: %d\n",#5811268240,},temp32)
57 (JMP,_,_,71)
58 (+,#5811266608,3,temp33)
59 (==,#5811265168,temp33,temp34)
60 (%,#5811265168,2,temp35)
61 (==,temp35,0,temp36)
62 (&&,temp34,temp36,temp37)
63 (IFNZ,temp37,_,65)
64 (JMP,_,_,70)
65 (+,#5811266608,1,temp38)
66 (/,#5811265168,temp38,temp39)
67 (=,#5811264304,temp39,_)
68 (CALL,printf,{"2: %d\n",#5811264304,},temp40)
69 (JMP,_,_,71)
70 (CALL,printf,{"3: %d\n",#5811264304,},temp41)
71 (+,#5811265168,1,temp43)
72 (=,#5811265168,temp43,_)
73 (+,#5811265168,1,temp42)
74 (JMP,_,_,36)
75 (+,#5811266608,0,temp44)
76 (+,#5811266608,1,temp45)
77 (=,#5811266608,temp45,_)
78 (JMP,_,_,30)
79 (RET,0,_,_)
====== Optimized IntermediateCode ======
1 2 (=,#5811262128,2,_)
2 3 (&,#5811262128,_,temp0)
3 4 (CALL,scanf,{"%d",temp0,},temp1)
4 5 (=,#5811262784,#5811262128,_)
5 6 (+,#5811262784,100,temp2)
6 7 (%,temp2,2,temp3)
7 8 (CALL,printf,{"%d\n",temp3,},temp4)
8 10 (+,#5811262128,1,temp6)
9 11 (=,#5811262128,temp6,_)
10 12 (=,#5811264304,0,_)
11 13 (=,#5811264496,3,_)
12 14 (=,#5811264688,1,_)
13 15 (>,#5811264496,0,temp7)
14 16 (IFNZ,temp7,_,18)
15 17 (JMP,_,_,23)
16 18 (*,#5811264688,#5811264496,temp8)
17 19 (=,#5811264688,temp8,_)
18 20 (-,#5811264496,1,temp9)
19 21 (=,#5811264496,temp9,_)
20 22 (JMP,_,_,15)
21 23 (%,#5811264688,100,temp10)
22 24 (-,temp10,1,temp11)
23 25 (CALL,printf,{"%d\n",temp11,},temp12)
24 27 (+,#5811264304,1,temp14)
25 28 (=,#5811264304,temp14,_)
26 29 (=,#5811266608,0,_)
27 30 (%,#5811264688,100,temp15)
28 31 (-,temp15,1,temp16)
29 32 (IFNZ,temp16,_,34)
30 33 (JMP,_,_,79)
31 34 (+,#5811266608,1,temp17)
32 35 (=,#5811265168,temp17,_)
33 36 (%,#5811264688,100,temp18)
34 37 (-,temp18,1,temp19)
35 38 (<,#5811265168,temp19,temp20)
36 39 (IFNZ,temp20,_,41)
37 40 (JMP,_,_,75)
38 41 (-,#5811265168,5,temp21)
39 42 (==,temp21,#5811266608,temp22)
40 43 (!,#5811266608,_,temp23)
41 44 (+,temp23,2,temp24)
42 45 (==,temp24,#5811265168,temp25)
43 46 (-,#5811265168,3,temp26)
44 47 (==,temp26,#5811266608,temp27)
45 48 (&&,temp25,temp27,temp28)
46 49 (||,temp22,temp28,temp29)
47 50 (IFNZ,temp29,_,52)
48 51 (JMP,_,_,58)
49 52 (=,#5811268240,0,_)
50 53 (+,#5811266608,1,temp30)
51 54 (%,#5811265168,temp30,temp31)
52 55 (=,#5811268240,temp31,_)
53 56 (CALL,printf,{"1: %d\n",#5811268240,},temp32)
54 57 (JMP,_,_,71)
55 58 (+,#5811266608,3,temp33)
56 59 (==,#5811265168,temp33,temp34)
57 60 (%,#5811265168,2,temp35)
58 61 (==,temp35,0,temp36)
59 62 (&&,temp34,temp36,temp37)
60 63 (IFNZ,temp37,_,65)
61 64 (JMP,_,_,70)
62 65 (+,#5811266608,1,temp38)
63 66 (/,#5811265168,temp38,temp39)
64 67 (=,#5811264304,temp39,_)
65 68 (CALL,printf,{"2: %d\n",#5811264304,},temp40)
66 69 (JMP,_,_,71)
67 70 (CALL,printf,{"3: %d\n",#5811264304,},temp41)
68 71 (+,#5811265168,1,temp43)
69 72 (=,#5811265168,temp43,_)
70 74 (JMP,_,_,36)
71 76 (+,#5811266608,1,temp45)
72 77 (=,#5811266608,temp45,_)
73 78 (JMP,_,_,30)
74 79 (RET,0,_,_)
