====== GRAMMER TREE ======
->ROOT(11)
-->Function|Int(4)
--->ID:do_it(1)
--->Parameters: (4)
---->n|INT(1)
--->Statement>COMPOUND(4)
---->Statement>RET(3)
----->Expression(3)
------>ID:n(3)
------>Operator> % (3)
------>Number:2(3)
-->EntryPoint(11)
--->Statement>COMPOUND(11)
---->Statement>DECLARE(8)
----->Type: Int(8)
----->Statement>ASSIGN(8)
------>ID:c(8)
------>Statement>CALL(8)
------->ID:do_it(8)
------->Arguments: (8)
-------->Number:5(8)
---->Statement>CALL(9)
----->ID:printf(9)
----->Arguments: (9)
------>String:"%d"(9)
------>Statement>CALL(9)
------->ID:do_it(9)
------->Arguments: (9)
-------->Number:5(9)
---->Statement>RET(10)
----->Number:0(10)
====== LEX RESULT ======
INT
ID do_it 5056261696
LBS
INT
ID n 5056265136
RBS
LP
RETURN
ID n 5056265136
OP_MOD
NUMBER 2
SEMI
RP
INT
MAIN
LBS
RBS
LP
INT
ID c 5056265888
OP_ASSIGN
ID do_it 5056261696
LBS
NUMBER 5
RBS
SEMI
ID printf ~
LBS
COMMA
ID do_it 5056261696
LBS
NUMBER 5
RBS
RBS
SEMI
RETURN
NUMBER 0
SEMI
RP
====== SYMBOL TABLE ======
INT n     5056265136
INT c     5056265888
====== FUNCTIONS ======
do_it     5056265040
====== IntermediateCode ======
1 (FUNC,do_it,{#5056265136,},_)
2 (%,#5056265136,2,temp0)
3 (RET,temp0,_,_)
4 (ENDF,do_it,_,_)
5 (CALL,do_it,{5,},temp1)
6 (=,#5056265888,temp1,_)
7 (CALL,do_it,{5,},temp2)
8 (CALL,printf,{"%d",temp2,},temp3)
9 (RET,0,_,_)
====== Optimized IntermediateCode ======
1 1 (FUNC,do_it,{#5056265136,},_)
2 2 (%,#5056265136,2,temp0)
3 3 (RET,temp0,_,_)
4 4 (ENDF,do_it,_,_)
5 5 (CALL,do_it,{5,},temp1)
6 6 (=,#5056265888,temp1,_)
7 7 (CALL,do_it,{5,},temp2)
8 8 (CALL,printf,{"%d",temp2,},temp3)
9 9 (RET,0,_,_)
