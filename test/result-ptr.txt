====== GRAMMER TREE ======
->ROOT(13)
-->EntryPoint(13)
--->Statement>COMPOUND(13)
---->Statement>DECLARE(3)
----->Type: Int(3)
----->Statement>ASSIGN(3)
------>ID:a(3)
------>Number:0(3)
---->Statement>DECLARE(4)
----->Type: Int(4)
----->Statement>ASSIGN(4)
------>ID:b(4)
------>ID:a(4)
---->Statement>CALL(5)
----->ID:printf(5)
----->Arguments: (5)
------>String:"%d, %d\n"(5)
------>ID:a(5)
------>ID:b(5)
---->Statement>DECLARE(6)
----->Type: Int Pointer:(6)
----->Statement>ASSIGN(6)
------>ID:pa(6)
------>Expression(6)
------->Operator> & (6)
------->ID:a(6)
---->Statement>DECLARE(7)
----->Type: Int Pointer:(7)
----->Statement>ASSIGN(7)
------>ID:pb(7)
------>Expression(7)
------->Operator> & (7)
------->ID:b(7)
---->Statement>DECLARE(8)
----->Type: Int(8)
----->Statement>ASSIGN(8)
------>ID:t(8)
------>Expression(8)
------->Operator> * (8)
------->ID:pb(8)
---->Statement>ASSIGN(9)
----->Left Value:(9)
------>Operator> * (9)
------>ID:pb(9)
----->Expression(9)
------>Operator> * (9)
------>ID:pa(9)
---->Statement>ASSIGN(10)
----->Left Value:(10)
------>Operator> * (10)
------>ID:pa(10)
----->ID:t(10)
---->Statement>CALL(11)
----->ID:printf(11)
----->Arguments: (11)
------>String:"%d, %d\n"(11)
------>ID:a(11)
------>ID:b(11)
---->Statement>RET(12)
----->Number:0(12)
====== LEX RESULT ======
INT
MAIN
LBS
RBS
LP
INT
ID a 5324704272
OP_ASSIGN
NUMBER 0
SEMI
INT
ID b 5324704512
OP_ASSIGN
ID a 5324704272
SEMI
ID printf ~
LBS
COMMA
ID a 5324704272
COMMA
ID b 5324704512
RBS
SEMI
INT
OP_MUL
ID pa 5324704768
OP_ASSIGN
BIT_AND
ID a 5324704272
SEMI
INT
OP_MUL
ID pb 5324705008
OP_ASSIGN
BIT_AND
ID b 5324704512
SEMI
INT
ID t 5324705680
OP_ASSIGN
OP_MUL
ID pb 5324705008
SEMI
OP_MUL
ID pb 5324705008
OP_ASSIGN
OP_MUL
ID pa 5324704768
SEMI
OP_MUL
ID pa 5324704768
OP_ASSIGN
ID t 5324705680
SEMI
ID printf ~
LBS
COMMA
ID a 5324704272
COMMA
ID b 5324704512
RBS
SEMI
RETURN
NUMBER 0
SEMI
RP
====== SYMBOL TABLE ======
INT t     5324705680
INT* pb     5324705008
INT* pa     5324704768
INT b     5324704512
INT a     5324704272
====== IntermediateCode ======
1 (=,#5324704272,0,_)
2 (=,#5324704512,#5324704272,_)
3 (CALL,printf,{"%d, %d\n",#5324704272,#5324704512,},temp0)
4 (&,#5324704272,_,temp1)
5 (=,#5324704768,temp1,_)
6 (&,#5324704512,_,temp2)
7 (=,#5324705008,temp2,_)
8 (*,#5324705008,_,temp3)
9 (=,#5324705680,temp3,_)
10 (*,#5324704768,_,temp4)
11 (&=,#5324705008,temp4,_)
12 (&=,#5324704768,#5324705680,_)
13 (CALL,printf,{"%d, %d\n",#5324704272,#5324704512,},temp5)
14 (RET,0,_,_)
====== Optimized IntermediateCode ======
1 1 (=,#5324704272,0,_)
2 2 (=,#5324704512,#5324704272,_)
3 3 (CALL,printf,{"%d, %d\n",#5324704272,#5324704512,},temp0)
4 4 (&,#5324704272,_,temp1)
5 5 (=,#5324704768,temp1,_)
6 6 (&,#5324704512,_,temp2)
7 7 (=,#5324705008,temp2,_)
8 8 (*,#5324705008,_,temp3)
9 9 (=,#5324705680,temp3,_)
10 10 (*,#5324704768,_,temp4)
11 11 (&=,#5324705008,temp4,_)
12 12 (&=,#5324704768,#5324705680,_)
13 13 (CALL,printf,{"%d, %d\n",#5324704272,#5324704512,},temp5)
14 14 (RET,0,_,_)
