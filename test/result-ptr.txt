====== GRAMMER TREE ======
->ROOT(13)
-->EntryPoint(13)
--->Statement>COMPOUND(13)
---->Statement>DECLARE(3)
----->Type: Int(3)
----->Statement>ASSIGN(3)
------>ID:a(3)
------>Number:0(3)
---->Statement>DECLARE(4)
----->Type: Int(4)
----->Statement>ASSIGN(4)
------>ID:b(4)
------>ID:a(4)
---->Statement>CALL(5)
----->ID:printf(5)
----->Arguments: (5)
------>String:"%d, %d\n"(5)
------>ID:a(5)
------>ID:b(5)
---->Statement>DECLARE(6)
----->Type: Int Pointer:(6)
----->Statement>ASSIGN(6)
------>ID:pa(6)
------>Expression(6)
------->Operator> & (6)
------->ID:a(6)
---->Statement>DECLARE(7)
----->Type: Int Pointer:(7)
----->Statement>ASSIGN(7)
------>ID:pb(7)
------>Expression(7)
------->Operator> & (7)
------->ID:b(7)
---->Statement>DECLARE(8)
----->Type: Int(8)
----->Statement>ASSIGN(8)
------>ID:t(8)
------>Expression(8)
------->Operator> * (8)
------->ID:pb(8)
---->Statement>ASSIGN(9)
----->Left Value:(9)
------>Operator> * (9)
------>ID:pb(9)
----->Expression(9)
------>Operator> * (9)
------>ID:pa(9)
---->Statement>ASSIGN(10)
----->Left Value:(10)
------>Operator> * (10)
------>ID:pa(10)
----->ID:t(10)
---->Statement>CALL(11)
----->ID:printf(11)
----->Arguments: (11)
------>String:"%d, %d\n"(11)
------>ID:a(11)
------>ID:b(11)
---->Statement>RET(12)
----->Number:0(12)
====== LEX RESULT ======
INT
MAIN
LBS
RBS
LP
INT
ID a 5811243536
OP_ASSIGN
NUMBER 0
SEMI
INT
ID b 5811243776
OP_ASSIGN
ID a 5811243536
SEMI
ID printf ~
LBS
COMMA
ID a 5811243536
COMMA
ID b 5811243776
RBS
SEMI
INT
OP_MUL
ID pa 5811244032
OP_ASSIGN
BIT_AND
ID a 5811243536
SEMI
INT
OP_MUL
ID pb 5811244272
OP_ASSIGN
BIT_AND
ID b 5811243776
SEMI
INT
ID t 5811244944
OP_ASSIGN
OP_MUL
ID pb 5811244272
SEMI
OP_MUL
ID pb 5811244272
OP_ASSIGN
OP_MUL
ID pa 5811244032
SEMI
OP_MUL
ID pa 5811244032
OP_ASSIGN
ID t 5811244944
SEMI
ID printf ~
LBS
COMMA
ID a 5811243536
COMMA
ID b 5811243776
RBS
SEMI
RETURN
NUMBER 0
SEMI
RP
====== SYMBOL TABLE ======
INT t     5811244944
INT* pb     5811244272
INT* pa     5811244032
INT b     5811243776
INT a     5811243536
====== IntermediateCode ======
1 (=,#5811243536,0,_)
2 (=,#5811243776,#5811243536,_)
3 (CALL,printf,{"%d, %d\n",#5811243536,#5811243776,},temp0)
4 (&,#5811243536,_,temp1)
5 (=,#5811244032,temp1,_)
6 (&,#5811243776,_,temp2)
7 (=,#5811244272,temp2,_)
8 (*,#5811244272,_,temp3)
9 (=,#5811244944,temp3,_)
10 (*,#5811244032,_,temp4)
11 (&=,#5811244272,temp4,_)
12 (&=,#5811244032,#5811244944,_)
13 (CALL,printf,{"%d, %d\n",#5811243536,#5811243776,},temp5)
14 (RET,0,_,_)
====== Optimized IntermediateCode ======
1 1 (=,#5811243536,0,_)
2 2 (=,#5811243776,#5811243536,_)
3 3 (CALL,printf,{"%d, %d\n",#5811243536,#5811243776,},temp0)
4 4 (&,#5811243536,_,temp1)
5 5 (=,#5811244032,temp1,_)
6 6 (&,#5811243776,_,temp2)
7 7 (=,#5811244272,temp2,_)
8 8 (*,#5811244272,_,temp3)
9 9 (=,#5811244944,temp3,_)
10 10 (*,#5811244032,_,temp4)
11 11 (&=,#5811244272,temp4,_)
12 12 (&=,#5811244032,#5811244944,_)
13 13 (CALL,printf,{"%d, %d\n",#5811243536,#5811243776,},temp5)
14 14 (RET,0,_,_)
