====== GRAMMER TREE ======
->ROOT(13)
-->EntryPoint(13)
--->Statement>COMPOUND(13)
---->Statement>DECLARE(3)
----->Type: Int(3)
----->Statement>ASSIGN(3)
------>ID:a(3)
------>Number:0(3)
---->Statement>DECLARE(4)
----->Type: Int(4)
----->Statement>ASSIGN(4)
------>ID:b(4)
------>ID:a(4)
---->Statement>CALL(5)
----->ID:printf(5)
----->Arguments: (5)
------>String:"%d, %d\n"(5)
------>ID:a(5)
------>ID:b(5)
---->Statement>DECLARE(6)
----->Type: Int Pointer:(6)
----->Statement>ASSIGN(6)
------>ID:pa(6)
------>Expression(6)
------->Operator> & (6)
------->ID:a(6)
---->Statement>DECLARE(7)
----->Type: Int Pointer:(7)
----->Statement>ASSIGN(7)
------>ID:pb(7)
------>Expression(7)
------->Operator> & (7)
------->ID:b(7)
---->Statement>DECLARE(8)
----->Type: Int(8)
----->Statement>ASSIGN(8)
------>ID:t(8)
------>Expression(8)
------->Operator> * (8)
------->ID:pb(8)
---->Statement>ASSIGN(9)
----->Left Value:(9)
------>Operator> * (9)
------>ID:pb(9)
----->Expression(9)
------>Operator> * (9)
------>ID:pa(9)
---->Statement>ASSIGN(10)
----->Left Value:(10)
------>Operator> * (10)
------>ID:pa(10)
----->ID:t(10)
---->Statement>CALL(11)
----->ID:printf(11)
----->Arguments: (11)
------>String:"%d, %d\n"(11)
------>ID:a(11)
------>ID:b(11)
---->Statement>RET(12)
----->Number:0(12)
====== LEX RESULT ======
INT
MAIN
LBS
RBS
LP
INT
ID a 105553157275936
OP_ASSIGN
NUMBER 0
SEMI
INT
ID b 105553157276128
OP_ASSIGN
ID a 105553157275936
SEMI
ID printf ~
LBS
COMMA
ID a 105553157275936
COMMA
ID b 105553157276128
RBS
SEMI
INT
OP_MUL
ID pa 105553157276512
OP_ASSIGN
BIT_AND
ID a 105553157275936
SEMI
INT
OP_MUL
ID pb 105553157276416
OP_ASSIGN
BIT_AND
ID b 105553157276128
SEMI
INT
ID t 105553157276992
OP_ASSIGN
OP_MUL
ID pb 105553157276416
SEMI
OP_MUL
ID pb 105553157276416
OP_ASSIGN
OP_MUL
ID pa 105553157276512
SEMI
OP_MUL
ID pa 105553157276512
OP_ASSIGN
ID t 105553157276992
SEMI
ID printf ~
LBS
COMMA
ID a 105553157275936
COMMA
ID b 105553157276128
RBS
SEMI
RETURN
NUMBER 0
SEMI
RP
====== SYMBOL TABLE ======
INT t     105553157276992
INT* pb     105553157276416
INT* pa     105553157276512
INT b     105553157276128
INT a     105553157275936
====== Optimized IntermediateCode ======
1 1 (=,#105553157275936,0,_)
2 2 (=,#105553157276128,#105553157275936,_)
3 3 (CALL,printf,{"%d, %d\n",#105553157275936,#105553157276128,},temp0)
4 4 (&,#105553157275936,_,temp1)
5 5 (=,#105553157276512,temp1,_)
6 6 (&,#105553157276128,_,temp2)
7 7 (=,#105553157276416,temp2,_)
8 8 (*,#105553157276416,_,temp3)
9 9 (=,#105553157276992,temp3,_)
10 10 (*,#105553157276512,_,temp4)
11 11 (&=,#105553157276416,temp4,_)
12 12 (&=,#105553157276512,#105553157276992,_)
13 13 (CALL,printf,{"%d, %d\n",#105553157275936,#105553157276128,},temp5)
14 14 (RET,0,_,_)
====== AsmCode readable ======
line:1====>
%include "io.inc"

section .text
	global CMAIN
CMAIN:
	mov ebp, esp
	sub esp, 44
	mov [esp+40], dword 0

line:2====>
	mov eax, [esp+40]
	mov [esp+36], eax

line:3====>
	PRINT_STRING ``
	PRINT_DEC 4,
	PRINT_STRING ``

line:4====>
	lea eax, [esp+40]
	mov [esp+28], eax

line:5====>
	mov eax, [esp+28]
	mov [esp+24], eax

line:6====>
	lea eax, [esp+36]
	mov [esp+20], eax

line:7====>
	mov eax, [esp+20]
	mov [esp+16], eax

line:8====>
	mov eax, [esp+16]
	mov eax, [eax]
	mov [esp+12], eax

line:9====>
	mov eax, [esp+12]
	mov [esp+8], eax

line:10====>
	mov eax, [esp+24]
	mov eax, [eax]
	mov [esp+4], eax

line:11====>
	mov eax, [esp+16]
	mov ebx, [esp+4]
	mov [eax], ebx

line:12====>
	mov eax, [esp+24]
	mov ebx, [esp+8]
	mov [eax], ebx

line:13====>
	PRINT_STRING ``
	PRINT_DEC 4,
	PRINT_STRING ``

line:14====>
	mov eax, dword 0
	add esp, 44
	ret

==== AsmCode ====
%include "io.inc"

section .text
	global CMAIN
CMAIN:
	mov ebp, esp
	sub esp, 44
	mov [esp+40], dword 0
	mov eax, [esp+40]
	mov [esp+36], eax
	PRINT_STRING ``
	PRINT_DEC 4,
	PRINT_STRING ``
	lea eax, [esp+40]
	mov [esp+28], eax
	mov eax, [esp+28]
	mov [esp+24], eax
	lea eax, [esp+36]
	mov [esp+20], eax
	mov eax, [esp+20]
	mov [esp+16], eax
	mov eax, [esp+16]
	mov eax, [eax]
	mov [esp+12], eax
	mov eax, [esp+12]
	mov [esp+8], eax
	mov eax, [esp+24]
	mov eax, [eax]
	mov [esp+4], eax
	mov eax, [esp+16]
	mov ebx, [esp+4]
	mov [eax], ebx
	mov eax, [esp+24]
	mov ebx, [esp+8]
	mov [eax], ebx
	PRINT_STRING ``
	PRINT_DEC 4,
	PRINT_STRING ``
	mov eax, dword 0
	add esp, 44
	ret
